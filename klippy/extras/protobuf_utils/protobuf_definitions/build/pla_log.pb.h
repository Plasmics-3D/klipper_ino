/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_PLA_LOG_PB_H_INCLUDED
#define PB_PLA_LOG_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _pla_log_lvl_e {
    pla_log_lvl_e_off = 0,
    pla_log_lvl_e_info = 1,
    pla_log_lvl_e_debug = 2,
    pla_log_lvl_e_error = 3
} pla_log_lvl_e;

/* Struct definitions */
typedef struct _log {
    bool has_log_lvl;
    pla_log_lvl_e log_lvl;
    bool has_message;
    char message[100];
} log;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _pla_log_lvl_e_MIN pla_log_lvl_e_off
#define _pla_log_lvl_e_MAX pla_log_lvl_e_error
#define _pla_log_lvl_e_ARRAYSIZE ((pla_log_lvl_e)(pla_log_lvl_e_error+1))

#define log_log_lvl_ENUMTYPE pla_log_lvl_e


/* Initializer values for message structs */
#define log_init_default                         {false, _pla_log_lvl_e_MIN, false, ""}
#define log_init_zero                            {false, _pla_log_lvl_e_MIN, false, ""}

/* Field tags (for use in manual encoding/decoding) */
#define log_log_lvl_tag                          1
#define log_message_tag                          2

/* Struct field encoding specification for nanopb */
#define log_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    log_lvl,           1) \
X(a, STATIC,   OPTIONAL, STRING,   message,           2)
#define log_CALLBACK NULL
#define log_DEFAULT NULL

extern const pb_msgdesc_t log_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define log_fields &log_msg

/* Maximum encoded size of messages (where known) */
#define PLA_LOG_PB_H_MAX_SIZE                    log_size
#define log_size                                 103

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
