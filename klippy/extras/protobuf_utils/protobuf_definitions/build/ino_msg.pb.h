/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_INO_MSG_PB_H_INCLUDED
#define PB_INO_MSG_PB_H_INCLUDED
#include <pb.h>
#include "pla_log.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _ino_error_e {
    ino_error_e_user_shutdown = 0,
    ino_error_e_heating_too_fast = 1,
    ino_error_e_heating_too_slow = 2,
    ino_error_e_exceeded_max_temp = 3,
    ino_error_e_no_heartbeat_received = 4
} ino_error_e;

typedef enum _ino_commands_e {
    ino_commands_e_start_autotune = 0,
    ino_commands_e_stop_autotune = 1,
    ino_commands_e_shutdown = 2
} ino_commands_e;

typedef enum _pla_commands_e {
    pla_commands_e_fw_update = 0,
    pla_commands_e_set_log_level = 1,
    pla_commands_e_get_log_level = 2,
    pla_commands_e_read_errors = 3,
    pla_commands_e_clear_errors = 4,
    pla_commands_e_read_info = 5
} pla_commands_e;

typedef enum _response_e {
    response_e_ack = 0,
    response_e_nack = 1,
    response_e_param_error = 2
} response_e;

/* Struct definitions */
typedef struct _settings {
    bool has_target;
    float target;
    bool has_ki;
    float ki;
    bool has_kp;
    float kp;
    bool has_kd;
    float kd;
} settings;

typedef struct _pla_info {
    bool has_fw_version;
    char fw_version[10];
    bool has_hw_version;
    char hw_version[10];
    bool has_name;
    char name[50];
} pla_info;

typedef struct _ino_command {
    bool has_command;
    ino_commands_e command;
    pb_size_t which_data;
    union {
        float tuning_temperature;
    } data;
} ino_command;

typedef struct _read_setting_request {
    pb_size_t tags_count;
    uint8_t tags[20];
} read_setting_request;

/* TODO Lee - Basically a duplication of read_setting_request */
typedef struct _error_tags {
    pb_size_t tags_count;
    uint8_t tags[10];
} error_tags;

typedef struct _pla_command {
    bool has_command;
    pla_commands_e command;
    pb_size_t which_data;
    union {
        error_tags tags;
        pla_log_lvl_e log_level;
    } data;
} pla_command;

typedef struct _serial_request { /* option (nanopb_msgopt).submsg_callback = true; */
    pb_size_t which_requests;
    union {
        read_setting_request read_setting;
        settings settings;
        pla_command pla_cmd;
        ino_command ino_cmd; /* read_setting_request_limited read_setting_limited = 5; */
    } requests;
} serial_request;

typedef struct _serial_response {
    bool has_result;
    response_e result;
    pb_size_t which_responses;
    union {
        settings settings;
        pla_info info;
        error_tags errors;
        log log_msg;
    } responses;
} serial_response;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ino_error_e_MIN ino_error_e_user_shutdown
#define _ino_error_e_MAX ino_error_e_no_heartbeat_received
#define _ino_error_e_ARRAYSIZE ((ino_error_e)(ino_error_e_no_heartbeat_received+1))

#define _ino_commands_e_MIN ino_commands_e_start_autotune
#define _ino_commands_e_MAX ino_commands_e_shutdown
#define _ino_commands_e_ARRAYSIZE ((ino_commands_e)(ino_commands_e_shutdown+1))

#define _pla_commands_e_MIN pla_commands_e_fw_update
#define _pla_commands_e_MAX pla_commands_e_read_info
#define _pla_commands_e_ARRAYSIZE ((pla_commands_e)(pla_commands_e_read_info+1))

#define _response_e_MIN response_e_ack
#define _response_e_MAX response_e_param_error
#define _response_e_ARRAYSIZE ((response_e)(response_e_param_error+1))



#define pla_command_command_ENUMTYPE pla_commands_e
#define pla_command_data_log_level_ENUMTYPE pla_log_lvl_e

#define ino_command_command_ENUMTYPE ino_commands_e




#define serial_response_result_ENUMTYPE response_e


/* Initializer values for message structs */
#define settings_init_default                    {false, 0, false, 0, false, 0, false, 0}
#define pla_info_init_default                    {false, "", false, "", false, ""}
#define pla_command_init_default                 {false, _pla_commands_e_MIN, 0, {error_tags_init_default}}
#define ino_command_init_default                 {false, _ino_commands_e_MIN, 0, {0}}
#define read_setting_request_init_default        {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define error_tags_init_default                  {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define serial_request_init_default              {0, {read_setting_request_init_default}}
#define serial_response_init_default             {false, _response_e_MIN, 0, {settings_init_default}}
#define settings_init_zero                       {false, 0, false, 0, false, 0, false, 0}
#define pla_info_init_zero                       {false, "", false, "", false, ""}
#define pla_command_init_zero                    {false, _pla_commands_e_MIN, 0, {error_tags_init_zero}}
#define ino_command_init_zero                    {false, _ino_commands_e_MIN, 0, {0}}
#define read_setting_request_init_zero           {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define error_tags_init_zero                     {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define serial_request_init_zero                 {0, {read_setting_request_init_zero}}
#define serial_response_init_zero                {false, _response_e_MIN, 0, {settings_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define settings_target_tag                      1
#define settings_ki_tag                          2
#define settings_kp_tag                          3
#define settings_kd_tag                          4
#define pla_info_fw_version_tag                  1
#define pla_info_hw_version_tag                  2
#define pla_info_name_tag                        3
#define ino_command_command_tag                  1
#define ino_command_tuning_temperature_tag       2
#define read_setting_request_tags_tag            1
#define error_tags_tags_tag                      1
#define pla_command_command_tag                  1
#define pla_command_tags_tag                     2
#define pla_command_log_level_tag                3
#define serial_request_read_setting_tag          1
#define serial_request_settings_tag              2
#define serial_request_pla_cmd_tag               3
#define serial_request_ino_cmd_tag               4
#define serial_response_result_tag               1
#define serial_response_settings_tag             2
#define serial_response_info_tag                 3
#define serial_response_errors_tag               4
#define serial_response_log_msg_tag              5

/* Struct field encoding specification for nanopb */
#define settings_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    target,            1) \
X(a, STATIC,   OPTIONAL, FLOAT,    ki,                2) \
X(a, STATIC,   OPTIONAL, FLOAT,    kp,                3) \
X(a, STATIC,   OPTIONAL, FLOAT,    kd,                4)
#define settings_CALLBACK NULL
#define settings_DEFAULT NULL

#define pla_info_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   fw_version,        1) \
X(a, STATIC,   OPTIONAL, STRING,   hw_version,        2) \
X(a, STATIC,   OPTIONAL, STRING,   name,              3)
#define pla_info_CALLBACK NULL
#define pla_info_DEFAULT NULL

#define pla_command_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    command,           1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,tags,data.tags),   2) \
X(a, STATIC,   ONEOF,    UENUM,    (data,log_level,data.log_level),   3)
#define pla_command_CALLBACK NULL
#define pla_command_DEFAULT NULL
#define pla_command_data_tags_MSGTYPE error_tags

#define ino_command_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    command,           1) \
X(a, STATIC,   ONEOF,    FLOAT,    (data,tuning_temperature,data.tuning_temperature),   2)
#define ino_command_CALLBACK NULL
#define ino_command_DEFAULT NULL

#define read_setting_request_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   tags,              1)
#define read_setting_request_CALLBACK NULL
#define read_setting_request_DEFAULT NULL

#define error_tags_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   tags,              1)
#define error_tags_CALLBACK NULL
#define error_tags_DEFAULT NULL

#define serial_request_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (requests,read_setting,requests.read_setting),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (requests,settings,requests.settings),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (requests,pla_cmd,requests.pla_cmd),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (requests,ino_cmd,requests.ino_cmd),   4)
#define serial_request_CALLBACK NULL
#define serial_request_DEFAULT NULL
#define serial_request_requests_read_setting_MSGTYPE read_setting_request
#define serial_request_requests_settings_MSGTYPE settings
#define serial_request_requests_pla_cmd_MSGTYPE pla_command
#define serial_request_requests_ino_cmd_MSGTYPE ino_command

#define serial_response_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    result,            1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (responses,settings,responses.settings),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (responses,info,responses.info),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (responses,errors,responses.errors),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (responses,log_msg,responses.log_msg),   5)
#define serial_response_CALLBACK NULL
#define serial_response_DEFAULT NULL
#define serial_response_responses_settings_MSGTYPE settings
#define serial_response_responses_info_MSGTYPE pla_info
#define serial_response_responses_errors_MSGTYPE error_tags
#define serial_response_responses_log_msg_MSGTYPE log

extern const pb_msgdesc_t settings_msg;
extern const pb_msgdesc_t pla_info_msg;
extern const pb_msgdesc_t pla_command_msg;
extern const pb_msgdesc_t ino_command_msg;
extern const pb_msgdesc_t read_setting_request_msg;
extern const pb_msgdesc_t error_tags_msg;
extern const pb_msgdesc_t serial_request_msg;
extern const pb_msgdesc_t serial_response_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define settings_fields &settings_msg
#define pla_info_fields &pla_info_msg
#define pla_command_fields &pla_command_msg
#define ino_command_fields &ino_command_msg
#define read_setting_request_fields &read_setting_request_msg
#define error_tags_fields &error_tags_msg
#define serial_request_fields &serial_request_msg
#define serial_response_fields &serial_response_msg

/* Maximum encoded size of messages (where known) */
#define INO_MSG_PB_H_MAX_SIZE                    serial_response_size
#define error_tags_size                          30
#define ino_command_size                         7
#define pla_command_size                         34
#define pla_info_size                            73
#define read_setting_request_size                60
#define serial_request_size                      62
#define serial_response_size                     107
#define settings_size                            20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
